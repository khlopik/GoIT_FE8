"use strict";Object.keys||(Object.keys=function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}),Array.isArray||(Array.isArray=function(e){return"[object Array]"==Object.prototype.toString.call(e)}),Array.prototype.forEach||(Array.prototype.forEach=function(e,t){for(var n=this.length>>>0,r=0;r<n;r++)r in this&&e.call(t,this[r],r,this)}),function(){if(!Element.prototype.addEventListener){var e=[],t=function(t,n){var r=this,o=function(e){e.target=e.srcElement,e.currentTarget=r,void 0!==n.handleEvent?n.handleEvent(e):n.call(r,e)};if("DOMContentLoaded"==t){var i=function(e){"complete"==document.readyState&&o(e)};if(document.attachEvent("onreadystatechange",i),e.push({object:this,type:t,listener:n,wrapper:i}),"complete"==document.readyState){var l=new Event;l.srcElement=window,i(l)}}else this.attachEvent("on"+t,o),e.push({object:this,type:t,listener:n,wrapper:o})},n=function(t,n){for(var r=0;r<e.length;){var o=e[r];if(o.object==this&&o.type==t&&o.listener==n){"DOMContentLoaded"==t?this.detachEvent("onreadystatechange",o.wrapper):this.detachEvent("on"+t,o.wrapper),e.splice(r,1);break}++r}};Element.prototype.addEventListener=t,Element.prototype.removeEventListener=n,HTMLDocument&&(HTMLDocument.prototype.addEventListener=t,HTMLDocument.prototype.removeEventListener=n),Window&&(Window.prototype.addEventListener=t,Window.prototype.removeEventListener=n)}}(),function(){"firstElementChild"in document.documentElement||Object.defineProperty(Element.prototype,"firstElementChild",{get:function(){for(var e,t=this.children,n=0,r=t.length;n<r;++n)if(e=t[n],1===e.nodeType)return e;return null}})}(),function(){"lastElementChild"in document.documentElement||Object.defineProperty(Element.prototype,"lastElementChild",{get:function(){for(var e,t=this.children,n=t.length-1;n>=0;--n)if(e=t[n],1===e.nodeType)return e;return null}})}(),function(){"previousElementSibling"in document.documentElement||Object.defineProperty(Element.prototype,"previousElementSibling",{get:function(){for(var e=this.previousSibling;e&&1!==e.nodeType;)e=e.previousSibling;return e}})}(),function(){"nextElementSibling"in document.documentElement||Object.defineProperty(Element.prototype,"nextElementSibling",{get:function(){for(var e=this.nextSibling;e&&1!==e.nodeType;)e=e.nextSibling;return e}})}(),function(){window.getComputedStyle||(window.getComputedStyle=function(e){if(!e)return null;var t=e.currentStyle,n=e.getBoundingClientRect(),r=document.createElement("div"),o=r.style;for(var i in t)o[i]=t[i];return o.cssFloat=o.styleFloat,"auto"===o.width&&(o.width=n.right-n.left+"px"),"auto"===o.height&&(o.height=n.bottom-n.top+"px"),o})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
