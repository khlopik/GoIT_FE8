"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},tns=function(){function t(){for(var t,n,e,i=arguments[0]||{},o=1,a=arguments.length;o<a;o++)if(null!==(t=arguments[o]))for(n in t)e=t[n],i!==e&&void 0!==e&&(i[n]=e);return i}function n(t,n){for(var e=0;e<t.length;e++)if(t[e]===n)return e;return-1}function e(t){return void 0!==t.item}function i(t,n){var i,o=e(t)?t:[t];if(void 0!==n.nodeType&&1===n.nodeType)for(i=o.length;i--;)o[i].appendChild(n);else if("string"==typeof n)for(i=o.length;i--;)o[i].insertAdjacentHTML("beforeend",n);else if(e(n)){var a=document.createDocumentFragment();for(i=n.length;i--;)a.insertBefore(n[i],a.firstChild);for(var r=o.length;r--;)o[r].appendChild(a)}}function o(t,n){for(var i=e(t)?t:[t],o=i.length;o--;){var a=o>0?n.cloneNode(!0):n,r=i[o],l=r.parentNode,c=r.nextSibling;a.appendChild(r),c?l.insertBefore(a,c):l.appendChild(a)}}function a(t){for(var n=e(t)?t:[t],i=n.length;i--;){for(var o=n[i],a=o.parentNode;o.firstChild;)a.insertBefore(o.firstChild,o);a.removeChild(o)}}function r(){return void 0===window.tnsId?window.tnsId=1:window.tnsId++,"tns"+window.tnsId}function l(t,n){return Math.atan2(t,n)*(180/Math.PI)}function c(t,n){return Math.abs(90-Math.abs(t))>=90-n?"horizontal":Math.abs(90-Math.abs(t))<=n&&"vertical"}function s(t,n){return t.hasAttribute(n)}function u(t,n){return t.getAttribute(n)}function d(t){return void 0!==t.item}function f(t,n){if(t=d(t)||t instanceof Array?t:[t],"[object Object]"===Object.prototype.toString.call(n))for(var e=t.length;e--;)for(var i in n)t[e].setAttribute(i,n[i])}function h(t,n){t=d(t)||t instanceof Array?t:[t],n=n instanceof Array?n:[n];for(var e=n.length,i=t.length;i--;)for(var o=e;o--;)t[i].removeAttribute(n[o])}function m(t){var n=t.cloneNode(!0);t.parentNode.insertBefore(n,t),t.remove(),t=null}function v(t){s(t,"hidden")||f(t,{hidden:""})}function p(t){s(t,"hidden")&&h(t,"hidden")}function y(t){return"boolean"==typeof t.complete?t.complete:"number"==typeof t.naturalWidth?0!==t.naturalWidth:void 0}function g(t){var n,e=document.createElement("fakeelement");for(n in t)if(void 0!==e.style[n])return[n,t[n][0],t[n][1]];return!1}function b(t,n){for(var e in n){var i=("touchstart"===e||"touchmove"===e)&&A;t.addEventListener(e,n[e],i)}}function w(t,n){for(var e in n){var i=("touchstart"===e||"touchmove"===e)&&A;t.removeEventListener(e,n[e],i)}}function x(){return{topics:{},on:function(t,n){this.topics[t]=this.topics[t]||[],this.topics[t].push(n)},off:function(t,n){if(this.topics[t])for(var e=0;e<this.topics[t].length;e++)if(this.topics[t][e]===n){this.topics[t].splice(e,1);break}},emit:function(t,n){this.topics[t]&&this.topics[t].forEach(function(t){t(n)})}}}function E(t,n,e,i,o,a,r){function l(){a-=c,s+=u,t.style[n]=e+s+"px"+i,a>0?setTimeout(l,c):r()}var c=Math.min(a,10),s=Number(t.style[n].slice(e.length,-(i.length+2))),u=(o-s)/a*c;setTimeout(l,c)}function C(e){function s(){return"gallery"===Xt||"page"===e.slideBy?Zt:e.slideBy}function d(){return(Wt+en)/Zt}function g(){if(Qt<=Zt){rn=!1;In="gallery"===Xt?0:pn,void 0!==In&&re.emit("indexChanged",Nt()),kn&&v(kn),Dn&&v(Dn),Gn&&v(Gn)}else rn=e.arrowKeys,Ln&&p(kn),Mn&&p(Dn),Fn&&p(Gn)}function C(){if(f(Kt,{"data-tns-role":"wrapper"}),f(Vt,{"data-tns-role":"content-wrapper"}),"vertical"===Yt?f(Vt,{"data-tns-hidden":"y"}):f(Kt,{"data-tns-hidden":"x"}),"carousel"===Xt){var t=an&&on?U():on?on+en:0;Vt.style.cssText="horizontal"===Yt?"margin: 0 "+t+"px;":"padding: "+t+"px 0 "+on+"px; height: "+K()+"px;"}}function T(){Wt=se(),Zt=le(),Ft=yn-Zt-Hn,"horizontal"!==Yt||an||(mn=d()),_t=ce(),tn=s()}function M(){""===$t.id&&($t.id=hn),f($t,{"data-tns-role":"content","data-tns-mode":Xt,"data-tns-axis":Yt}),"horizontal"===Yt&&($t.style.width=(mn+1)*yn+"px")}function A(){"carousel"===Xt&&(un&&f($t,{"data-tns-hidden":"y"}),$t.style[En]=Cn+Math.round(-St[In])+"px"+Tn)}function L(){navigator.msMaxTouchPoints&&(Kt.classList.add("ms-touch"),b(Kt,{scroll:gt}))}function k(){for(var t=0;t<Qt;t++){var n=Jt[t];n.id=hn+"-item"+t,"gallery"===Xt&&ie&&n.classList.add(ie),f(n,{"aria-hidden":"true"});var e="horizontal"===Yt?"right":"bottom",i="";"carousel"===Xt&&(i="margin-"+e+": "+en+"px;"),"horizontal"===Yt&&(i="width: "+(mn-en)+"px; "+i),n.style.cssText+=i}if(sn||on){for(var o=document.createDocumentFragment(),a=document.createDocumentFragment(),r=pn;r--;){var l=r%Qt,c=Jt[l].cloneNode(!0);if(h(c,"id"),a.insertBefore(c,a.firstChild),"carousel"===Xt){var s=Jt[Qt-1-l].cloneNode(!0);h(s,"id"),o.appendChild(s)}}$t.insertBefore(o,$t.firstChild),$t.appendChild(a),Jt=$t.children}}function _(){Mn&&(e.controlsContainer?(It=Dn.children[0],zt=Dn.children[1],f(Dn,{"aria-label":"Carousel Navigation"}),f(It,{"data-controls":"prev"}),f(zt,{"data-controls":"next"}),f(Dn.children,{"aria-controls":hn,tabindex:"-1"})):(i(Kt,'<div data-tns-role="controls" aria-label="Carousel Navigation"><button data-controls="prev" tabindex="-1" aria-controls="'+hn+'" type="button">'+An[0]+'</button><button data-controls="next" tabindex="0" aria-controls="'+hn+'" type="button">'+An[1]+"</button></div>"),[].forEach.call(Kt.children,function(t){"controls"===t.getAttribute("data-tns-role")&&(Dn=t)}),It=Dn.children[0],zt=Dn.children[1]))}function F(){if(Ln)if(e.navContainer)f(kn,{"aria-label":"Carousel Pagination"}),Ht=kn.children,[].forEach.call(Ht,function(t,n){f(t,{"data-nav":n,tabindex:"-1","aria-selected":"false","aria-controls":hn+"-item"+n})});else{for(var t="",n=0;n<Qt;n++)t+='<button data-nav="'+n+'" tabindex="-1" aria-selected="false" aria-controls="'+hn+"-item"+n+'" type="button"></button>';t='<div data-tns-role="nav" aria-label="Carousel Pagination">'+t+"</div>",i(Kt,t),[].forEach.call(Kt.children,function(t){"nav"===t.getAttribute("data-tns-role")&&(kn=t)}),Ht=kn.children;for(var o=_t;o<Qt;o++)f(Ht[o],{hidden:""});Nn=_t}}function W(){Fn&&(Gn?f(Gn,{"data-action":"stop"}):(kn||(i(Kt,'<div data-tns-role="nav" aria-label="Carousel Pagination"></div>'),kn=Kt.querySelector('[data-tns-role="nav"]')),i(kn,'<button data-action="stop" type="button">'+Xn+Bn[0]+"</button>"),Gn=kn.querySelector("[data-action]")),ct())}function R(){for(var t=In;t<In+Zt;t++){var n=Jt[t];f(n,{"aria-hidden":"false"}),"gallery"===Xt&&(n.style.left=mn*(t-In)+"px",n.classList.remove(ie),n.classList.add(ne))}Mn&&(f(zt,{tabindex:"0"}),(In===_n&&!sn||cn)&&(It.disabled=!0)),Ln&&f(Ht[0],{tabindex:"0","aria-selected":"true"})}function B(){if("carousel"===Xt){if(O){var t={};t[O]=et,b($t,t)}Vn&&b($t,{touchstart:Et,touchmove:Ct,touchend:Tt,touchcancel:Tt}),Qn&&b($t,{mousedown:Et,mousemove:Ct,mouseup:Tt,mouseleave:Tt})}if(Ln)for(var n=0;n<Qt;n++)b(Ht[n],{click:lt,keydown:yt});Mn&&(b(It,{click:at,keydown:pt}),b(zt,{click:rt,keydown:pt})),Fn&&(b(Gn,{click:ft}),jn&&(b($t,{mouseover:function(){qn&&(st(),Un=!0)}}),b($t,{mouseout:function(){!qn&&Un&&(ct(),Un=!1)}})),Yn&&b(document,{visibilitychange:ht})),rn&&b(document,{keydown:mt}),"inner"===nn?re.on("outerResized",function(){Pt(),re.emit("innerLoaded",Nt())}):(b(window,{resize:Ot}),"outer"===nn&&re.on("innerLoaded",G))}function j(){var t=In,n=In+Zt;for(on&&(t-=1,n+=1);t<n;t++)[].forEach.call(Jt[t].querySelectorAll('[data-tns-role="lazy-img"]'),function(t){var n={};n[O]=function(t){t.stopPropagation()},b(t,n),t.classList.contains("loaded")||(t.src=u(t,"data-src"),t.classList.add("loaded"))})}function G(){for(var t=[],n=In;n<In+Zt;n++)[].forEach.call(Jt[n].querySelectorAll("img"),function(n){t.push(n)});0===t.length?X():q(t)}function q(t){t.forEach(function(n,e){y(n)&&t.splice(e,1)}),0===t.length?X():setTimeout(function(){q(t)},16)}function U(){return(Wt%mn+en)/2}function X(){for(var t,n=[],e=In;e<In+Zt;e++)n.push(Jt[e].offsetHeight);t=Math.max.apply(null,n),$t.style.height!==t&&(N&&Z(ln),$t.style.height=t+"px")}function Y(){St=[0];for(var t,n=Jt[0].getBoundingClientRect()[xn],e=1;e<yn;e++)t=Jt[e].getBoundingClientRect()[xn],St.push(t-n)}function K(){return St[In+Zt]-St[In]}function V(){Kt.style.msScrollSnapPointsX="snapInterval(0%, "+mn+")"}function $(){var t,n,e,i;In!==zn&&(In>zn?(t=zn,n=Math.min(zn+Zt,In),e=Math.max(zn+Zt,In),i=In+Zt):(t=Math.max(In+Zt,zn),n=zn+Zt,e=In,i=Math.min(In+Zt,zn))),tn%1!=0&&(t=Math.round(t),n=Math.round(n),e=Math.round(e),i=Math.round(i));for(var o=t;o<n;o++)f(Jt[o],{"aria-hidden":"true"});for(var a=e;a<i;a++)f(Jt[a],{"aria-hidden":"false"})}function J(){Ln&&(-1===Pn?e.navContainer?On=In%Qt:(On=Math.floor(In%Qt/Zt),sn||Qt%Zt==0||In!==Ft||(On+=1)):(On=Pn,Pn=-1),On!==Sn&&(f(Ht[Sn],{tabindex:"-1","aria-selected":"false"}),f(Ht[On],{tabindex:"0","aria-selected":"true"}),Sn=On))}function Q(){if(Mn&&!sn){var t=[],n=[];In===_n?(t.push(It),n.push(zt),vt(It,zt)):cn||In!==Ft?n.push(It,zt):(t.push(zt),n.push(It),vt(zt,It)),t.length>0&&t.forEach(function(t){t.disabled||(t.disabled=!0,f(t,{tabindex:"-1"}))}),n.length>0&&n.forEach(function(t){t.disabled&&(t.disabled=!1,f(t,{tabindex:"0"}))})}}function Z(t,n){t=t?t/1e3+"s":"",n=n||$t,n.style[N]=t,"gallery"===Xt&&(n.style[S]=t),"vertical"===Yt&&(Vt.style[N]=t)}function tt(t,n){void 0===t&&(t=ln),N&&Z(t),ue(t,n)}function nt(){f($t,{"aria-busy":"true"}),bn&&de(),In!==zn&&re.emit("indexChanged",Nt()),re.emit("transitionStart",Nt()),tt()}function et(t){function n(t){return t.toLowerCase().replace(/-/g,"")}if(re.emit("transitionEnd",Nt(t)),"gallery"===Xt&&vn.length>0)for(var e=0;e<Zt;e++){var i=vn[e];N&&Z(0,i),oe&&P&&(i.style[P]=i.style[I]=""),i.classList.remove(ee),i.classList.add(ie),i.style.left=""}if(!t||"gallery"===Xt&&t.target.parentNode===$t||t.target===$t&&n(t.propertyName)===n(En)){if(!bn){var o=In;de(),In!==o&&(tt(0),re.emit("indexChanged",Nt()))}$(),J(),Q(),fn&&j(),un&&G(),"inner"===nn&&re.emit("innerLoaded",Nt()),h($t,"aria-busy"),it()}}function it(){zn=In}function ot(t){"true"!==u($t,"aria-busy")&&(In+=t*tn,nt())}function at(){ot(-1)}function rt(){ot(cn&&In===Ft?-(Ft-_n)/tn:1)}function lt(t){if("true"!==u($t,"aria-busy")){for(var i,o=t.target||t.srcElement;-1===n(Ht,o);)o=o.parentNode;i=Pn=Number(u(o,"data-nav"));var a="gallery"===Xt?0:pn;In=e.navContainer?i+a:i*Zt+a,In!==zn&&nt()}}function ct(){dt(),f(Gn,{"data-action":"stop"}),Gn.innerHTML=Xn+Bn[1],qn=!0}function st(){ut(),f(Gn,{"data-action":"start"}),Gn.innerHTML=Xn.replace("Stop","Start")+Bn[0],qn=!1}function ut(){qn="paused",clearInterval(Rt)}function dt(){!0!==qn&&(clearInterval(Rt),Rt=setInterval(function(){ot(Rn)},Wn))}function ft(){qn?st():ct()}function ht(){Kn!=document.hidden&&!1!==qn&&(document.hidden?ut():dt()),Kn=document.hidden}function mt(t){switch(t=t||window.event,t.keyCode){case H.LEFT:at();break;case H.RIGHT:rt()}}function vt(t,n){"object"===(void 0===t?"undefined":_typeof(t))&&"object"===(void 0===n?"undefined":_typeof(n))&&t===document.activeElement&&(t.blur(),n.focus())}function pt(t){t=t||window.event;var n=t.keyCode,e=document.activeElement;switch(n){case H.LEFT:case H.UP:case H.HOME:case H.PAGEUP:e!==It&&!0!==It.disabled&&vt(e,It);break;case H.RIGHT:case H.DOWN:case H.END:case H.PAGEDOWN:e!==zt&&!0!==zt.disabled&&vt(e,zt);break;case H.ENTER:case H.SPACE:e===zt?rt():at()}}function yt(t){t=t||window.event;var n=t.keyCode,e=document.activeElement,i=u(e,"data-nav");switch(n){case H.LEFT:case H.PAGEUP:i>0&&vt(e,e.previousElementSibling);break;case H.UP:case H.HOME:0!==i&&vt(e,Ht[0]);break;case H.RIGHT:case H.PAGEDOWN:i<_t-1&&vt(e,e.nextElementSibling);break;case H.DOWN:case H.END:i<_t-1&&vt(e,Ht[_t-1]);break;case H.ENTER:case H.SPACE:lt(t)}}function gt(){tt(0,$t.scrollLeft()),it()}function bt(t){return t.target||t.srcElement}function wt(t){return"a"===t.tagName.toLowerCase()}function xt(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function Et(t){t=t||window.event,wt(bt(t))&&xt(t);var n="touchstart"===t.type?t.changedTouches[0]:t;$n=parseInt(n.clientX),Jn=parseInt(n.clientY);var e=D?[11,-3]:[0,-2];Bt=Number($t.style[En].slice(e[0],e[1])),"touchstart"===t.type?re.emit("touchStart",Nt(t)):(re.emit("dragStart",Nt(t)),Zn=!0)}function Ct(t){if(t=t||window.event,Zn&&"mousemove"===t.type&&!te&&(te=!0),null!==$n){wt(bt(t))&&xt(t);var n="touchmove"===t.type?t.changedTouches[0]:t;if(jt=parseInt(n.clientX)-$n,Gt=parseInt(n.clientY)-Jn,c(l(Gt,jt),15)===Yt){qt=!0,"touchmove"===t.type?re.emit("touchMove",Nt(t)):re.emit("dragMove",Nt(t));var e="horizontal"===Yt?Bt+jt:Bt+Gt;e+="px",D&&(e="translate"+wn+"("+e+")",Z(0)),$t.style[En]=e}}}function Tt(t){if(t=t||window.event,Zn&&(Zn=!1),qt){qt=!1;var n=0===t.type.indexOf("touch")?t.changedTouches[0]:t;if(jt=parseInt(n.clientX)-$n,Gt=parseInt(n.clientY)-Jn,$n=Jn=null,"horizontal"===Yt)In=-(Bt+jt)/mn,In=jt>0?Math.floor(In):Math.ceil(In);else{var e=-(Bt+Gt);if(e<=0)In=_n;else if(e>=St[St.length-1])In=Ft;else{var i=0;do{i++,In=Gt<0?i+1:i}while(i<yn&&e>=Math.round(St[i+1]))}}0===t.type.indexOf("touch")?re.emit("touchEnd",Nt(t)):re.emit("dragEnd",Nt(t)),nt()}if(te){te=!1;var o=bt(t);wt(o)&&b(o,{click:function t(n){xt(n),w(o,{click:t})}})}}function Mt(){$t.style.width=(mn+1)*yn+"px";for(var t=yn;t--;)Jt[t].style.width=mn-en+"px"}function At(){for(var t=In+1,n=In+Zt;t<n;t++)Jt[t].style.left=mn*(t-In)+"px"}function Dt(){Vt.style.cssText="margin: 0px "+U()+"px"}function Lt(){Vt.style.height=K()+"px"}function kt(){if(_t!==Nn)if(_t>Nn)for(var t=Nn;t<_t;t++)h(Ht[t],"hidden");else for(var n=_t;n<Nn;n++)f(Ht[n],{hidden:""});Nn=_t}function Nt(t){return{container:$t,slideItems:Jt,navItems:Ht,prevButton:It,nextButton:zt,items:Zt,index:In,indexCached:zn,navCurrent:On,navCurrentCached:Sn,slideCount:Qt,cloneCount:pn,slideCountNew:yn,event:t||{}}}function Pt(){var t=In,n=Zt;T(),g(),de(),"horizontal"===Yt?(an&&on?Dt():(Mt(),"gallery"===Xt&&At()),Y()):(Y(),Lt()),In!==t&&(re.emit("indexChanged",Nt()),$(),Mn&&!sn&&Q()),Ln&&Zt!==n&&!e.navContainer&&(kt(),J()),(In!==t||"carousel"===Xt&&!an)&&tt(0),un&&G(),(fn&&In!==t||Zt!==n)&&j(),navigator.msMaxTouchPoints&&V()}function Ot(t){clearTimeout(Ut),Ut=setTimeout(function(){Wt!==se()&&(Pt(),"outer"===nn&&re.emit("outerResized",Nt(t)))},100)}if(e=t({container:document.querySelector(".slider"),mode:"carousel",axis:"horizontal",items:1,gutter:0,edgePadding:0,fixedWidth:!1,slideBy:1,controls:!0,controlsText:["prev","next"],controlsContainer:!1,nav:!0,navContainer:!1,arrowKeys:!1,speed:300,autoplay:!1,autoplayTimeout:5e3,autoplayDirection:"forward",autoplayText:["start","stop"],autoplayHoverPause:!1,autoplayButton:!1,autoplayResetOnVisibility:!0,animateIn:"tns-fadeIn",animateOut:"tns-fadeOut",animateNormal:"tns-normal",animateDelay:!1,loop:!0,autoHeight:!1,responsive:!1,lazyload:!1,touch:!0,mouseDrag:!1,rewind:!1,nested:!1,onInit:!1},e||{}),"object"===_typeof(e.container)&&null!==e.container){var St,It,zt,Ht,_t,Ft,Wt,Rt,Bt,jt,Gt,qt,Ut,Xt=e.mode,Yt=e.axis,Kt=document.createElement("div"),Vt=document.createElement("div"),$t=e.container,Jt=$t.children,Qt=Jt.length,Zt=e.items,tn=s(),nn=e.nested,en=e.gutter,on="gallery"!==Xt&&e.edgePadding,an=e.fixedWidth,rn=e.arrowKeys,ln=e.speed,cn=e.rewind,sn="gallery"===Xt||!e.rewind&&e.loop,un="gallery"===Xt||e.autoHeight,dn=!an&&e.responsive,fn=e.lazyload,hn=$t.id||r(),mn=an?an+en:0,vn=[],pn=sn?2*Qt:on?1:0,yn="gallery"===Xt?Qt+pn:Qt+2*pn,gn=!(!an||sn||on),bn="gallery"===Xt||!sn,wn="horizontal"===Yt?"X":"Y",xn="horizontal"===Yt?"left":"top",En=xn,Cn="",Tn="",Mn=e.controls,An=e.controlsText,Dn=!!e.controlsContainer&&e.controlsContainer,Ln=e.nav,kn=e.navContainer||!1,Nn=Qt,Pn=-1,On=0,Sn=0,In="gallery"===Xt?0:pn,zn=In,Hn=on?1:0,_n=Hn,Fn=e.autoplay,Wn=e.autoplayTimeout,Rn="forward"===e.autoplayDirection?1:-1,Bn=e.autoplayText,jn=e.autoplayHoverPause,Gn=e.autoplayButton,qn=!1,Un=!1,Xn="<span hidden>Stop Animation</span>",Yn=e.autoplayResetOnVisibility,Kn=!1,Vn=e.touch,$n=null,Jn=null,Qn=e.mouseDrag,Zn=!1,te=!1,ne=S?e.animateIn:"tns-fadeIn",ee=S?e.animateOut:"tns-fadeOut",ie=S?e.animateNormal:"tns-normal",oe=!!S&&e.animateDelay,ae=e.onInit,re=new x;D&&(En=D,Cn="translate"+wn+"(",Tn=")");var le=function(){return an?function(){return Math.max(1,Math.min(Qt,Math.floor(Wt/an)))}:function(){var t=e.items,n="object"===(void 0===dn?"undefined":_typeof(dn))&&Object.keys(dn);return n&&n.forEach(function(n){Wt>=n&&(t=dn[n])}),Math.max(1,Math.min(Qt,t))}}(),ce=function(){return e.navContainer?function(){return Qt}:function(){return Math.ceil(Qt/Zt)}}(),se=function(){return"horizontal"===Yt&&!an&&on?function(){return Kt.clientWidth-2*(on+en)}:function(){return Kt.clientWidth}}();!function(){o($t,Vt),o(Vt,Kt),T(),M(),k(),Y(),C(),A(),L(),_(),F(),W(),R(),B(),g(),fn&&j(),un&&G(),"function"==typeof ae&&ae(Nt()),"inner"===nn&&re.emit("innerLoaded",Nt())}();var ue=function(){return"carousel"===Xt?function(t,n){n||(n=-St[In]),gn&&In===Ft&&(n=Math.max(n,-yn*mn+Wt+en)),N||!t?$t.style[En]=Cn+Math.round(n)+"px"+Tn:E($t,En,Cn,Tn,n,ln,et),"vertical"===Yt&&(Vt.style.height=K()+"px")}:function(){vn=[];var t={};t[O]=et,t[z]=et,w(Jt[zn],t);var n={};n[O]=et,n[z]=et,b(Jt[In],n),function(){for(var t=zn,n=zn+Zt;t<n;t++){var e=Jt[t];if(N&&Z(ln,e),oe&&P){var i=oe*(t-zn)/1e3;e.style[P]=i+"s",e.style[I]=i+"s"}e.classList.remove(ne),e.classList.add(ee),vn.push(e)}}(),function(){for(var t=In,n=In+Zt;t<n;t++){var e=Jt[t];if(N&&Z(ln,e),oe&&P){var i=oe*(t-In)/1e3;e.style[P]=i+"s",e.style[I]=i+"s"}e.classList.remove(ie),e.classList.add(ne),t>In&&(e.style.left=(t-In)*mn+"px")}}()}}(),de=function(){return sn?function(){var t="carousel"===Xt?tn+_n:_n,n="carousel"===Xt?Ft-tn:Ft;if(an&&Wt%mn!=0&&(n-=1),In>n)for(;In>=t+Qt;)In-=Qt;else if(In<t)for(;In<=n-Qt;)In+=Qt}:function(){In=Math.max(_n,Math.min(Ft,In))}}();return{getInfo:Nt,events:re,goTo:function(t){if("next"===t)In+=1;else if("prev"===t||"previous"===t)In-=1;else{var n,e=In%Qt;e<0&&(e+=Qt),"first"===t?n=0:"last"===t?n=Qt-1:"number"==typeof t&&(n=t%Qt),n<0&&(n+=Qt),In+=n-e}In!==zn&&(de(),nt())},destory:function(){if(a(Kt),a(Vt),Kt=Vt=null,h($t,["id","style","data-tns-role","data-tns-features"]),sn)for(var t=pn;t--;)Jt[0].remove(),Jt[Jt.length-1].remove();h(Jt,["id","style","aria-hidden"]),hn=Qt=null,Mn&&(e.controlsContainer?(h(Dn,["aria-label"]),h(Dn.children,["aria-controls","tabindex"]),m(Dn)):(Dn.remove(),Dn=It=zt=null)),Ln&&(e.navContainer?(h(kn,["aria-label"]),h(Ht,["aria-selected","aria-controls","tabindex"]),m(kn)):(kn.remove(),kn=null),Ht=null),Fn&&(e.navContainer||null===kn?m(Gn):(kn.remove(),kn=null),w(document,{visibilitychange:ht})),m($t),rn&&w(document,{keydown:mt}),w(window,{resize:Ot})}}}}!function(){"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)})}(),Date.now||(Date.now=function(){return(new Date).getTime()}),function(){for(var t=["webkit","moz"],n=0;n<t.length&&!window.requestAnimationFrame;++n){var e=t[n];window.requestAnimationFrame=window[e+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e+"CancelAnimationFrame"]||window[e+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var i=0;window.requestAnimationFrame=function(t){var n=Date.now(),e=Math.max(i+16,n);return setTimeout(function(){t(i=e)},e-n)},window.cancelAnimationFrame=clearTimeout}}(),function(){var t,n,e,i=window,o=document,a=Object,r="length",l="item contains add remove toggle toString toLocaleString".split(" "),c=l[2],s=l[3],u=l[4],d="prototype",f="defineProperty"in a||"__defineGetter__"in a[d]||null,h=function(t,n,e,i){a.defineProperty?a.defineProperty(t,n,{configurable:!1===f||!!i,get:e}):t.__defineGetter__(n,e)},m=function(t,n){var e=this,i=[],o={},d=0,f=0,m=function(){if(d>=f)for(;f<d;++f)!function(t){h(e,t,function(){return v(),i[t]},!1)}(f)},v=function(){var e,a,l=arguments,c=/\s+/;if(l[r])for(a=0;a<l[r];++a)if(c.test(l[a]))throw e=new SyntaxError('String "'+l[a]+'" contains an invalid character'),e.code=5,e.name="InvalidCharacterError",e;for(i=(""+t[n]).replace(/^\s+|\s+$/g,"").split(c),""===i[0]&&(i=[]),o={},a=0;a<i[r];++a)o[i[a]]=!0;d=i[r],m()};return v(),h(e,r,function(){return v(),d}),e[l[6]]=e[l[5]]=function(){return v(),i.join(" ")},e.item=function(t){return v(),i[t]},e.contains=function(t){return v(),!!o[t]},e[c]=function(){v.apply(e,a=arguments);for(var a,l,c=0,s=a[r];c<s;++c)l=a[c],o[l]||(i.push(l),o[l]=!0);d!==i[r]&&(d=i[r]>>>0,t[n]=i.join(" "),m())},e[s]=function(){v.apply(e,a=arguments);for(var a,l={},c=0,s=[];c<a[r];++c)l[a[c]]=!0,delete o[a[c]];for(c=0;c<i[r];++c)l[i[c]]||s.push(i[c]);i=s,d=s[r]>>>0,t[n]=i.join(" "),m()},e[u]=function(t,n){return v.apply(e,[t]),void 0!==n?n?(e[c](t),!0):(e[s](t),!1):o[t]?(e[s](t),!1):(e[c](t),!0)},function(t,n){if(n)for(var e=0;e<7;++e)n(t,l[e],{enumerable:!1})}(e,a.defineProperty),e},v=function t(n,e,i){h(n[d],e,function(){var n,a=this,l="__defineGetter__defineProperty"+e;if(a[l])return n;if(a[l]=!0,!1===f){for(var c,s=t.mirror=t.mirror||o.createElement("div"),u=s.childNodes,d=u[r],v=0;v<d;++v)if(u[v]._R===a){c=u[v];break}c||(c=s.appendChild(o.createElement("div"))),n=m.call(c,a,i)}else n=new m(a,i);return h(a,e,function(){return n}),delete a[l],n},!0)};if(i.DOMTokenList)t=o.createElement("div").classList,d=i.DOMTokenList[d],t[c].apply(t,l),2>t[r]&&(n=d[c],e=d[s],d[c]=function(){for(var t=0,e=arguments;t<e[r];++t)n.call(this,e[t])},d[s]=function(){for(var t=0,n=arguments;t<n[r];++t)e.call(this,n[t])}),t[u]("List",!1)&&(d[u]=function(t,n){var e=this;return e[(n=void 0===n?!e.contains(t):n)?c:s](t),!!n});else{if(f)try{h({},"support")}catch(t){f=!1}m.polyfill=!0,i.DOMTokenList=m,v(i.Element,"classList","className"),v(i.HTMLLinkElement,"relList","rel"),v(i.HTMLAnchorElement,"relList","rel"),v(i.HTMLAreaElement,"relList","rel")}}();var T=!1;try{var M=Object.defineProperty({},"passive",{get:function(){T=!0}});window.addEventListener("test",null,M)}catch(t){}var A=!!T&&{passive:!0},D=function(t){for(var n=document.documentElement,e=0;e<t.length;e++)if(t[e]in n.style)return t[e]}(["transform","WebkitTransform","MozTransform","msTransform","OTransform"]),L={transitionDuration:["transitionDelay","transitionend"],WebkitTransitionDuration:["WebkitTransitionDelay","webkitTransitionEnd"],MozTransitionDuration:["MozTransitionDelay","transitionend"],OTransitionDuration:["OTransitionDelay","oTransitionEnd"]},k={animationDuration:["animationDelay","animationend"],WebkitAnimationDuration:["WebkitAnimationDelay","webkitAnimationEnd"],MozAnimationDuration:["MozAnimationDelay","animationend"],OAnimationDuration:["OAnimationDelay","oAnimationEnd"]},N=g(L)[0],P=g(L)[1],O=g(L)[2],S=g(k)[0],I=g(k)[1],z=g(k)[2],H={ENTER:13,SPACE:32,PAGEUP:33,PAGEDOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40};return C}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
